akka {

   projection {
     jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size = 10
     jdbc.dialect = mysql-dialect
   }

}

jdbc-connection-settings {
  driver = "com.mysql.jdbc.Driver"
  url = "jdbc:mysql://127.0.0.1:3306/cqrs_jdbc_demo?noAccessToProcedureBodies=true&createDatabaseIfNotExist=true&m=yes&characterEncoding=UTF-8&connectTimeout=300000&useSSL=false&socketTimeout=30000&autoReconnect=true&maxReconnects=10&initialTimeout=10"
  user = "root"
  password = "1q2w3e4r5t"

    # the following properties are used to configure the
    # Hikari connection pool used on the read-side (akka-projections)
    connection-pool {
      # How many connections should be available to from the pool?
      # it's recommended to use the same value used by the blocking-jdbc-dispatcher (see above)
      max-pool-size = ${akka.projection.jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size}

      # How long should we wait (in millis) before it times out?
      # In a normal scenario, we should always be able to get a connection
      # If we got a thread from the blocking-jdbc-dispatcher, we should be able to get a connection.
      # If for some reason the pool can't provide a connection, it's better to let it crash and liberate the current thread.
      # Hence the low timout (note, 250 is lowest value hikari accepts)
      timeout = 250ms
    }
}

scalikejdbc.global {
  loggingSQLAndTime.enabled=false
  loggingSQLAndTime.singleLineMode=false
  loggingSQLAndTime.logLevel=debug
  loggingSQLAndTime.warningEnabled=true
  loggingSQLAndTime.warningThresholdMillis=5
  loggingSQLAndTime.warningLogLevel=warn
}