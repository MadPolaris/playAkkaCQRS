syntax = "proto3";
import "saga_participant.proto";

package net.imadz.infrastructure.saga.proto;


message TransactionPO {
  string id = 1;
  repeated TransactionStepPO steps = 2;
  repeated string phases = 3;
}

message TransactionResponsePO {
  oneof response {
    CompletedPO completed = 1;
    FailedPO failed = 2;
    PartiallyCompletedPO partial = 3;
  }
}

message CompletedPO {
  string transaction_id = 1;
}

message FailedPO {
  string transaction_id = 1;
  string reason = 2;
}

message PartiallyCompletedPO {
  string transaction_id = 1;
  repeated TransactionStepPO completedSteps = 2;
  repeated TransactionStepPO failedSteps = 3;
}

message ParticipantPO {
  string name = 1;
  oneof participant_type {
    net.imadz.infrastructure.proto.FromAccountParticipantPO from_account_participant = 2;
    net.imadz.infrastructure.proto.ToAccountParticipantPO to_account_participant = 3;
    // Add more participant types as needed
  }
}

enum StepStatusPO {
  STEP_CREATED = 0;
  STEP_ONGOING = 1;
  STEP_COMPLETED = 2;
  STEP_FAILED = 3;
  STEP_TIMEOUT = 4;
  STEP_COMPENSATED = 5;
}


message TransactionStepPO {
  string id = 1;
  string phase = 2;
  // TransactionParticipant is an interface and cannot be directly serialized.
  // This needs to be handled in the application layer.
  ParticipantPO participant = 3;
  StepStatusPO status = 4;
  optional string failedReason = 5;
  int32 retries = 6;
  int32 timeoutDuration = 7; // seconds
}


message SagaEventPO {
  oneof event {
    TransactionStartedPO transaction_started = 1;
    TransactionPhaseStartedPO transaction_phase_started = 2;
    TransactionStepStartedPO transaction_step_started = 3;
    StepCompletedPO step_completed = 4;
    StepFailedPO step_failed = 5;
    StepTimedOutPO step_timed_out = 6;
    StepCompensatedPO step_compensated = 7;
    PhaseCompletedPO phase_completed = 8;
    TransactionCompletedPO transaction_completed = 9;
  }
}

message TransactionStartedPO {
  TransactionPO transaction = 1;
}

message TransactionPhaseStartedPO {
  string phase = 1;
}

message TransactionStepStartedPO {
  TransactionStepPO step = 1;
}

message StepCompletedPO {
  TransactionStepPO step = 1;
  bool success = 2;
}

message StepFailedPO{
  TransactionStepPO step = 1;
  string reason = 2;
}

message StepTimedOutPO {
  TransactionStepPO step = 1;
}

message StepCompensatedPO {
  TransactionStepPO step = 1;
}

message PhaseCompletedPO {
  string phase = 1;
  bool success = 2;
}

message TransactionCompletedPO {
  bool success = 1;
}

message StatePO {
  optional TransactionPO current_transaction = 1;
  repeated TransactionStepPO completed_steps = 2;
  repeated TransactionStepPO failed_steps = 3;
  repeated TransactionStepPO compensate_steps = 4;
  string current_phase = 5;
  optional TransactionStepPO current_step = 6;
}
